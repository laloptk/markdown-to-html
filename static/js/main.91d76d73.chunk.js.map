{"version":3,"sources":["RawText.js","TextConverter.js","App.js","reportWebVitals.js","index.js"],"names":["RawText","props","className","onChange","handleChange","value","text","TextConverter","bind","state","rawText","event","this","setState","target","children","remarkPlugins","gfm","singleTilde","React","Component","CONVERT_TEXT","store","createStore","action","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAQeA,MARf,SAAiBC,GAChB,OACC,qBAAKC,UAAW,WAAhB,SACC,0BAAUC,SAAUF,EAAMG,aAAcC,MAAOJ,EAAMK,U,kCCqIzCC,E,kDAlId,WAAYN,GAAQ,IAAD,uBAClB,cAAMA,IAEDG,aAAe,EAAKA,aAAaI,KAAlB,gBAHF,OAgGlB,EAAKC,MAAQ,CACZC,QA5Fa,k3CALI,E,gDAqGnB,SAAaC,GACZC,KAAKC,SAAS,CACbH,QAASC,EAAMG,OAAOT,U,oBAMxB,WACC,OACC,sBAAKH,UAAU,eAAf,UACC,4DACA,4LAKA,uHACA,sBAAKA,UAAW,OAAhB,UACC,cAAC,EAAD,CAASE,aAAcQ,KAAKR,aAAcE,KAAMM,KAAKH,MAAMC,UAC3D,qBAAKR,UAAW,YAAhB,SACE,cAAC,IAAD,CAAea,SAAUH,KAAKH,MAAMC,QAASM,cAAe,CAAC,CAACC,IAAK,CAACC,aAAa,mB,GA3H5DC,IAAMC,W,gBCC5BC,EAAe,eAiBfC,EAAQC,aARa,WAAyB,IAAxBd,EAAuB,uDAAf,GAAIe,EAAW,uCACjD,OAAGA,EAAOC,OAASJ,EACVG,EAAOlB,KAEPG,KAgBIiB,MAVf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,IAAD,CAAUoB,MAAOA,EAAjB,SACE,cAAC,EAAD,SCjBOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.91d76d73.chunk.js","sourcesContent":["function RawText(props) {\r\n\treturn(\r\n\t\t<div className={\"text-raw\"} >\r\n\t\t\t<textarea onChange={props.handleChange} value={props.text}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RawText","import React from 'react';\r\nimport RawText from './RawText.js';\r\nimport ReactMarkDown from \"react-markdown\";\r\nimport gfm from 'remark-gfm'\r\n\r\nclass TextConverter extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\r\n\t\tconst markdown = `# Plain text\r\n\r\nline 1\r\nline 2\r\nline 3\r\nline 4\r\n\r\n# Headers\r\n\r\n# h1\r\n## h2\r\n### h3\r\n#### h4\r\n##### h5\r\n###### h6\r\n\r\n# header *italic*\r\n## header _italic text_\r\n### header **bold text**\r\n#### header __bold text__\r\n##### header ~~strikethrough~~\r\n###### header \\`code\\`\r\n###### header \\`\\`\\`code\\`\\`\\`\r\n###### header [opuscapita](https://www.opuscapita.com/)\r\n\r\n# Inline code\r\n\r\ntext \\`inline code\\` text\r\ntext \\`\\`\\`inline code\\`\\`\\` text\r\n\\`inline code\\`\r\n\\`\\`\\`inline code\\`\\`\\`\r\n\r\n# URL\r\n\r\n[opuscapita](https://www.opuscapita.com/)\r\n**[opuscapita](https://www.opuscapita.com/)**\r\n[~~opuscapita~~](https://www.opuscapita.com/)\r\n\r\n# Blockquotes\r\n\r\n> blockquote _italic text_\r\n>> blockquote **bold text**\r\n>>> blockquotes ~~strikethrough~~\r\n\r\n# Horisontal rules\r\n\r\n---\r\n***\r\n___\r\n\r\n\r\n# Ordered lists\r\n\r\n1. first line\r\n  1) first first line\r\n  2) first second line\r\n2. second line\r\n3. third line\r\n  1) third first line\r\n    1. third first first line\r\n\r\n# Unordered list\r\n\r\n+ Create a list by starting a line with \\`+\\`, \\`-\\`, or \\`*\\`\r\n+ Sub-lists are made by indenting 2 spaces:\r\n  - Marker character change forces new list start:\r\n    * Ac tristique libero volutpat at\r\n    + Facilisis in pretium nisl aliquet\r\n    - Nulla volutpat aliquam velit\r\n+ Very easy!\r\n\r\n# Emphasis\r\n\r\n_italic_\r\n*italic*\r\n__bold__\r\n**bold**\r\n~~strikethrough~~\r\n\r\n# Other\r\n\r\n## Code blocks\r\n\r\n\\`\\`\\`\r\ncode block\r\n  code block\r\n    code block\r\n\\`\\`\\`\r\n`\r\n\r\n\r\n\t\tthis.state = {\r\n\t\t\trawText: markdown\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tthis.setState({\r\n\t\t\trawText: event.target.value\r\n\t\t})\r\n\r\n\t\t//store.dispatch(convertText(event.target.value))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"text-wrapper\">\r\n\t\t\t\t<h1>Markdown to HTML converter</h1>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThis is a simple text area that, can turn markdown sintax into HTML. Edit the text in the textarea \r\n\t\t\t\t\tso you can see the changes in the right side of the page\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t<p>This project was made using create-react-app along with react-markdown and react-redux</p>\r\n\t\t\t\t<div className={\"text\"}>\t\t\t\t\t\r\n\t\t\t\t\t<RawText handleChange={this.handleChange} text={this.state.rawText} />\r\n\t\t\t\t\t<div className={\"text-rich\"}>\r\n\t\t\t\t\t \t<ReactMarkDown children={this.state.rawText} remarkPlugins={[[gfm, {singleTilde: false}]]}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default TextConverter","import './App.scss';\nimport ReactDOM from 'react-dom'\nimport TextConverter from './TextConverter.js'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst CONVERT_TEXT = 'CONVERT_TEXT'\n\nconst convertText = (text) => {\n  return {\n    type: CONVERT_TEXT,\n    text\n  }\n}\n\nconst convertTextReducer = (state = [], action) => {\n  if(action.type === CONVERT_TEXT) {\n    return action.text\n  } else {\n    return state\n  }\n}\n\nconst store = createStore(convertTextReducer)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store} >    \n        <TextConverter />\n      </Provider>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}